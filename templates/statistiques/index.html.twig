{% extends 'base.html.twig' %}

{% block title %}Tableau de Bord Financier{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
<style>
    .stats-card {
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border: none;
        overflow: hidden;
    }
    .stats-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
    }
    .chart-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        border: none;
    }
    .card-header {
        border-bottom: none;
        font-weight: 600;
        padding: 1.25rem;
    }
    .stats-icon {
        font-size: 2.5rem;
        opacity: 0.8;
        transition: all 0.3s ease;
    }
    .stats-card:hover .stats-icon {
        transform: scale(1.1);
        opacity: 1;
    }
    .btn-group .btn {
        border-radius: 8px;
        margin: 0 2px;
    }
    .chart-title {
        font-size: 1.1rem;
        color: #495057;
    }
    .no-data-message {
        padding: 3rem;
        color: #6c757d;
    }
    .no-data-message i {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
    .card-subtitle {
        font-size: 0.9rem;
        opacity: 0.8;
    }
    .export-buttons .btn {
        padding: 0.5rem 1rem;
        font-weight: 500;
    }
    .export-buttons .btn i {
        margin-right: 0.5rem;
    }
    .trend-indicator {
        font-size: 0.8rem;
        margin-left: 0.5rem;
    }
    .trend-up { color: #28a745; }
    .trend-down { color: #dc3545; }
    .period-selector {
        margin-bottom: 2rem;
    }
    .period-selector .btn {
        min-width: 100px;
        font-weight: 500;
    }
    .period-selector .btn.active {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
</style>
{% endblock %}

{% block body %}
<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mb-0"><i class="bi bi-graph-up"></i> Tableau de Bord Financier</h1>
        <div class="export-buttons">
            <button class="btn btn-outline-primary me-2" onclick="exportToPDF()"><i class="bi bi-file-pdf"></i> Exporter PDF</button>
            <button class="btn btn-outline-success" onclick="exportToExcel()"><i class="bi bi-file-excel"></i> Exporter Excel</button>
        </div>
    </div>

    <div class="period-selector text-center">
        <div class="btn-group" role="group" aria-label="Sélection de la période">
            <a href="{{ path('app_statistiques', {'periode': 'jour'}) }}" 
               class="btn btn-outline-primary {{ periode == 'jour' ? 'active' : '' }}" data-periode="jour">
                <i class="bi bi-calendar-day"></i> Par Jour
            </a>
            <a href="{{ path('app_statistiques', {'periode': 'mois'}) }}" 
               class="btn btn-outline-primary {{ periode == 'mois' ? 'active' : '' }}" data-periode="mois">
                <i class="bi bi-calendar-month"></i> Par Mois
            </a>
            <a href="{{ path('app_statistiques', {'periode': 'annee'}) }}" 
               class="btn btn-outline-primary {{ periode == 'annee' ? 'active' : '' }}" data-periode="annee">
                <i class="bi bi-calendar"></i> Par Année
            </a>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card stats-card text-white bg-success mb-3">
                <div class="card-body d-flex justify-content-between align-items-center p-4">
                    <div>
                        <h6 class="card-subtitle mb-2">Total Alimentations</h6>
                        <h3 class="card-title mb-0">{{ totalAlimentations|number_format(2, ',', ' ') }} €</h3>
                        <small class="trend-indicator {% if trendAlimentations.direction == 'up' %}trend-up{% elseif trendAlimentations.direction == 'down' %}trend-down{% endif %}">
                            <i class="bi bi-arrow-{{ trendAlimentations.direction }}-right"></i> {{ trendAlimentations.text }} par rapport à la période précédente
                        </small>
                    </div>
                    <i class="bi bi-cash-coin stats-icon"></i>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card stats-card text-white bg-danger mb-3">
                <div class="card-body d-flex justify-content-between align-items-center p-4">
                    <div>
                        <h6 class="card-subtitle mb-2">Total Dépenses</h6>
                        <h3 class="card-title mb-0">{{ totalDepenses|number_format(2, ',', ' ') }} €</h3>
                        <small class="trend-indicator"><i class="bi bi-arrow-down-right"></i> par rapport à la période précédente</small>
                    </div>
                    <i class="bi bi-credit-card stats-icon"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card chart-container mb-4">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="chart-title">
                            <i class="bi bi-bar-chart-line"></i> 
                            Évolution des Alimentations 
                            {% if periode == 'jour' %}
                                par Jour
                            {% elseif periode == 'mois' %}
                                par Mois
                            {% else %}
                                par Année
                            {% endif %}
                        </span>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-secondary" onclick="updateChartType('alimentationsChart', 'bar')"><i class="bi bi-bar-chart"></i></button>
                            <button class="btn btn-outline-secondary" onclick="updateChartType('alimentationsChart', 'line')"><i class="bi bi-graph-up"></i></button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-3">
                    {% if alimentationsParMois|length == 0 %}
                        <div class="text-center no-data-message">
                            <i class="bi bi-exclamation-circle d-block"></i>
                            <p class="mb-0">Aucune donnée disponible pour cette période</p>
                        </div>
                    {% else %}
                        <div style="position:relative;height:300px"><canvas id="alimentationsChart"></canvas></div>
                    {% endif %}
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card chart-container mb-4">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="chart-title">
                            <i class="bi bi-bar-chart-line"></i> 
                            Évolution des Dépenses
                            {% if periode == 'jour' %}
                                par Jour
                            {% elseif periode == 'mois' %}
                                par Mois
                            {% else %}
                                par Année
                            {% endif %}
                        </span>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-secondary" onclick="updateChartType('depensesChart', 'bar')"><i class="bi bi-bar-chart"></i></button>
                            <button class="btn btn-outline-secondary" onclick="updateChartType('depensesChart', 'line')"><i class="bi bi-graph-up"></i></button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-3">
                    {% if depensesParMois|length == 0 %}
                        <div class="text-center no-data-message">
                            <i class="bi bi-exclamation-circle d-block"></i>
                            <p class="mb-0">Aucune donnée disponible pour cette période</p>
                        </div>
                    {% else %}
                        <div style="position:relative;height:300px"><canvas id="depensesChart"></canvas></div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js"></script>

<script>
function initStatsCharts() {
    // --- tout le code d'initialisation des graphiques ici ---

    // Navigation AJAX pour la période
    document.querySelectorAll('.period-selector .btn').forEach(function(btn) {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const periode = btn.getAttribute('data-periode');
            if (!periode) return;
            fetch(window.location.pathname + '?periode=' + periode, {
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
            .then(resp => resp.json())
            .then(data => {
                // Met à jour les datasets des graphiques
                if (window.alimentationsChart && data.alimentationsParMois) {
                    window.alimentationsChart.data.labels = data.alimentationsParMois.map(item => item.periode);
                    window.alimentationsChart.data.datasets[0].data = data.alimentationsParMois.map(item => item.total);
                    window.alimentationsChart.update();
                }
                if (window.depensesChart && data.depensesParMois) {
                    window.depensesChart.data.labels = data.depensesParMois.map(item => item.periode);
                    window.depensesChart.data.datasets[0].data = data.depensesParMois.map(item => item.total);
                    window.depensesChart.update();
                }
                // Met à jour les totaux
                document.querySelector('.bg-success .card-title').textContent = parseFloat(data.totalAlimentations).toLocaleString('fr-FR', {minimumFractionDigits:2, maximumFractionDigits:2}) + ' €';
                document.querySelector('.bg-danger .card-title').textContent = parseFloat(data.totalDepenses).toLocaleString('fr-FR', {minimumFractionDigits:2, maximumFractionDigits:2}) + ' €';
                // Met à jour l'état actif des boutons
                document.querySelectorAll('.period-selector .btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            });
        });
    });
    Chart.defaults.font.family = '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
    Chart.defaults.font.size = 12;

    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false
            },
            tooltip: {
                mode: 'index',
                intersect: false,
                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                titleColor: '#000',
                bodyColor: '#000',
                borderColor: '#ddd',
                borderWidth: 1,
                padding: 10,
                cornerRadius: 4,
                callbacks: {
                    label: function(context) {
                        return context.dataset.label + ': ' + new Intl.NumberFormat('fr-FR', {
                            style: 'currency',
                            currency: 'EUR'
                        }).format(context.parsed.y);
                    }
                }
            }
        },
        scales: {
            x: {
                grid: {
                    display: false
                }
            },
            y: {
                beginAtZero: true,
                grid: {
                    color: 'rgba(0, 0, 0, 0.05)'
                },
                ticks: {
                    callback: function(value) {
                        return new Intl.NumberFormat('fr-FR', {
                            style: 'currency',
                            currency: 'EUR',
                            maximumFractionDigits: 0
                        }).format(value);
                    }
                }
            }
        },
        interaction: {
            intersect: false,
            mode: 'index'
        },
        animation: {
            duration: 1000,
            easing: 'easeInOutQuart'
        }
    };

    const alimentationsData = {
        labels: [
            {% for item in alimentationsParMois|reverse %}
                '{{ item.periode }}',
            {% endfor %}
        ],
        datasets: [{
            label: 'Alimentations',
            backgroundColor: 'rgba(40, 167, 69, 0.2)',
            borderColor: 'rgba(40, 167, 69, 1)',
            borderWidth: 2,
            pointBackgroundColor: 'rgba(40, 167, 69, 1)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgba(40, 167, 69, 1)',
            pointRadius: 4,
            pointHoverRadius: 6,
            data: [
                {% for item in alimentationsParMois|reverse %}
                    {{ item.total|default(0)|number_format(2, '.', '') }},
                {% endfor %}
            ],
            fill: true,
            tension: 0.4
        }]
    };

    const depensesData = {
        labels: [
            {% for item in depensesParMois|reverse %}
                '{{ item.periode }}',
            {% endfor %}
        ],
        datasets: [{
            label: 'Dépenses',
            backgroundColor: 'rgba(220, 53, 69, 0.2)',
            borderColor: 'rgba(220, 53, 69, 1)',
            borderWidth: 2,
            pointBackgroundColor: 'rgba(220, 53, 69, 1)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgba(220, 53, 69, 1)',
            pointRadius: 4,
            pointHoverRadius: 6,
            data: [
                {% for item in depensesParMois|reverse %}
                    {{ item.total|default(0)|number_format(2, '.', '') }},
                {% endfor %}
            ],
            fill: true,
            tension: 0.4
        }]
    };

    if (document.getElementById('alimentationsChart')) {
        window.alimentationsChart = new Chart(document.getElementById('alimentationsChart'), {
            type: 'line',
            data: alimentationsData,
            options: chartOptions
        });
    }

    if (document.getElementById('depensesChart')) {
        window.depensesChart = new Chart(document.getElementById('depensesChart'), {
            type: 'line',
            data: depensesData,
            options: chartOptions
        });
    }
}
document.addEventListener('DOMContentLoaded', initStatsCharts);
document.addEventListener('turbo:load', initStatsCharts);

function updateChartType(chartId, newType) {
    const chart = window[chartId];
    if (chart) {
        chart.config.type = newType;
        chart.update('none');
    }
}

function exportToPDF() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // En-tête
    doc.setFontSize(20);
    doc.text('Rapport Financier', 20, 20);
    
    doc.setFontSize(12);
    doc.text(`Date d'édition: ${new Date().toLocaleDateString('fr-FR')}`, 20, 30);
    
    // Ligne de séparation
    doc.setLineWidth(0.5);
    doc.line(20, 35, 190, 35);
    
    // Résumé financier
    doc.setFontSize(14);
    doc.text('Résumé Financier', 20, 45);
    
    doc.setFontSize(12);
    const totalAlimentations = document.querySelector('.bg-success .card-title').textContent;
    const totalDepenses = document.querySelector('.bg-danger .card-title').textContent;
    
    doc.text(`Total des Alimentations: ${totalAlimentations}`, 30, 55);
    doc.text(`Total des Dépenses: ${totalDepenses}`, 30, 65);
    
    doc.save('rapport-financier.pdf');
}

function exportToExcel() {
    const alimentationsData = window.alimentationsChart.data;
    const depensesData = window.depensesChart.data;
    
    const wb = XLSX.utils.book_new();
    wb.Props = {
        Title: "Rapport Financier",
        Subject: "Données Financières",
        Author: "Système de Gestion",
        CreatedDate: new Date()
    };
    
    // Feuille Alimentations
    const alimentationsWS = XLSX.utils.aoa_to_sheet([
        ['Période', 'Montant (€)'],
        ...alimentationsData.labels.map((label, i) => [
            label,
            parseFloat(alimentationsData.datasets[0].data[i]).toFixed(2)
        ])
    ]);
    
    // Feuille Dépenses
    const depensesWS = XLSX.utils.aoa_to_sheet([
        ['Période', 'Montant (€)'],
        ...depensesData.labels.map((label, i) => [
            label,
            parseFloat(depensesData.datasets[0].data[i]).toFixed(2)
        ])
    ]);
    
    // Mise en forme
    ['!cols', '!rows'].forEach(prop => {
        alimentationsWS[prop] = [{ wch: 15 }, { wch: 15 }];
        depensesWS[prop] = [{ wch: 15 }, { wch: 15 }];
    });
    
    XLSX.utils.book_append_sheet(wb, alimentationsWS, 'Alimentations');
    XLSX.utils.book_append_sheet(wb, depensesWS, 'Dépenses');
    
    XLSX.writeFile(wb, 'rapport-financier.xlsx');
}
</script>
{% endblock %}
